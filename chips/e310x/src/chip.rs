//! High-level setup and interrupt mapping for the chip.

use kernel;
use kernel::debug;
use rv32i::{support, syscall};
use rv32i::csr::{mcause, mie::mie, mip::mip, CSR};

use crate::gpio;
use crate::interrupts;
use crate::plic;
use crate::timer;
use crate::uart;

pub struct E310x {
    userspace_kernel_boundary: syscall::SysCall,
}

impl E310x {
    pub unsafe fn new() -> E310x {
        E310x {
            userspace_kernel_boundary: syscall::SysCall::new(),
        }
    }

    pub unsafe fn enable_plic_interrupts(&self) {
        plic::disable_all();
        plic::clear_all_pending();
        plic::enable_all();
    }
}

impl kernel::Chip for E310x {
    type MPU = ();
    type UserspaceKernelBoundary = syscall::SysCall;
    type SysTick = ();

    fn mpu(&self) -> &Self::MPU {
        &()
    }

    fn systick(&self) -> &Self::SysTick {
        &()
    }

    fn userspace_kernel_boundary(&self) -> &syscall::SysCall {
        &self.userspace_kernel_boundary
    }

    fn service_pending_interrupts(&self) {
        unsafe {
            if CSR.mip.is_set(mip::mtimer) {
                timer::MACHINETIMER.handle_interrupt();
            }
            while let Some(interrupt) = plic::next_pending() {
                match interrupt {
                    interrupts::UART0 => uart::UART0.handle_interrupt(),
                    index @ interrupts::GPIO0..=interrupts::GPIO31 => {
                        let pin = index - interrupts::GPIO0;
                        gpio::PORT[pin as usize].handle_interrupt();
                    }
                    _ => debug!("Pidx {}", interrupt),
                }

                // Mark that we are done with this interrupt and the hardware
                // can clear it.
                plic::complete(interrupt);
            }
            // With those conditions handled, enable those interrupts again.
            CSR.mie.modify(mie::mtimer::SET + mie::mext::SET);
        }
    }

    fn has_pending_interrupts(&self) -> bool {
        unsafe { plic::has_pending() || CSR.mip.is_set(mip::mtimer) }
    }

    fn sleep(&self) {
        unsafe {
            support::wfi();
        }
    }

    unsafe fn atomic<F, R>(&self, f: F) -> R
    where
        F: FnOnce() -> R,
    {
        support::atomic(f)
    }
}

fn handle_kernel_exception(exception: mcause::Exception) {
    let mtval = CSR.mtval.get();
    match exception {
        mcause::Exception::InstructionMisaligned => {
            panic!("misaligned instruction {:x}\n", mtval);
        }
        mcause::Exception::InstructionFault => {
            panic!("instruction fault {:x}\n", mtval);
        }
        mcause::Exception::IllegalInstruction => {
            panic!("illegal instruction {:x}\n", mtval);
        }
        mcause::Exception::Breakpoint => {
            debug!("breakpoint\n");
        }
        mcause::Exception::LoadMisaligned => {
            panic!("misaligned load {:x}\n", mtval);
        }
        mcause::Exception::LoadFault => {
            panic!("load fault {:x}\n", mtval);
        }
        mcause::Exception::StoreMisaligned => {
            panic!("misaligned store {:x}\n", mtval);
        }
        mcause::Exception::StoreFault => {
            panic!("store fault {:x}\n", mtval);
        }
        mcause::Exception::UserEnvCall => (),
        mcause::Exception::SupervisorEnvCall => (),
        mcause::Exception::MachineEnvCall => {
            // GENERATED BY ECALL; should never happen....
            panic!("machine mode environment call\n");
        }
        mcause::Exception::InstructionPageFault => {
            panic!("instruction page fault {:x}\n", mtval);
        }
        mcause::Exception::LoadPageFault => {
            panic!("load page fault {:x}\n", mtval);
        }
        mcause::Exception::StorePageFault => {
            panic!("store page fault {:x}\n", mtval);
        }
        mcause::Exception::Unknown => {
            panic!("exception type unknown");
        }
    }
}

fn disable_interrupt_cause(intr: mcause::Interrupt) {
    match intr {
        // Chip does not support supervisor mode
        mcause::Interrupt::SupervisorSoft
        | mcause::Interrupt::SupervisorTimer
        | mcause::Interrupt::SupervisorExternal => {
            panic!("unexpected supervisor interrupt {:?}", intr);
        },

        // User-mode interrupt delegation is not configured at this time
        mcause::Interrupt::UserExternal
        | mcause::Interrupt::UserTimer
        | mcause::Interrupt::UserSoft => {
            panic!("unexpected user interrupt {:?}", intr);
        },

        mcause::Interrupt::MachineSoft => {
            CSR.mie.modify(mie::msoft::CLEAR);
        }
        mcause::Interrupt::MachineTimer => {
            CSR.mie.modify(mie::mtimer::CLEAR);
        }
        mcause::Interrupt::MachineExternal => {
            CSR.mie.modify(mie::mext::CLEAR);
        }

        mcause::Interrupt::Unknown => {
            debug!("interrupt of unknown cause");
        }
    }
}

/// Trap handler for board/chip specific code.
///
/// For the e310 this gets called when an interrupt occurs while the chip is
/// in kernel mode. All we need to do is check which interrupt occurred and
/// disable it.
#[export_name = "_start_trap_rust"]
pub unsafe extern "C" fn start_trap_rust() {
    let cause = CSR.mcause.extract();
    match mcause::McauseHelpers::cause(&cause) {
        mcause::Trap::Interrupt(interrupt) => {
            disable_interrupt_cause(interrupt);
        },
        mcause::Trap::Exception(exception) => {
            handle_kernel_exception(exception);
        },
    }
}

/// Function that gets called if an interrupt occurs while an app was running.
/// mcause is passed in, and this function should correctly handle disabling the
/// interrupt that fired so that it does not trigger again.
#[export_name = "_disable_interrupt_trap_handler"]
pub extern "C" fn disable_interrupt_trap_handler(_mcause: u32) {
    // TODO: extract from input
    let cause = CSR.mcause.extract();
    match mcause::McauseHelpers::cause(&cause) {
        mcause::Trap::Interrupt(interrupt) => {
            disable_interrupt_cause(interrupt);
        },
        mcause::Trap::Exception(_) => {
            panic!("unexpected exception handling from userspace");
        },
    }
}
